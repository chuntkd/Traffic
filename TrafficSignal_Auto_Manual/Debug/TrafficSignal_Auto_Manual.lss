
TrafficSignal_Auto_Manual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800102  00800102  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d4  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1f  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000846  00000000  00000000  000023ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fc  00000000  00000000  00003483  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000387f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	78 d0       	rcall	.+240    	; 0x1b4 <main>
  c4:	6f c1       	rjmp	.+734    	; 0x3a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ButtonInit>:

#include "button.h"

void ButtonInit()
{
	BUTTON_MODE_DDR &= ~(1<<MODE_BUTTON); // 모드 변경 버튼 입력 설정
  c8:	d0 98       	cbi	0x1a, 0	; 26
	BUTTON_SIGNAL_DDR &= ~(1<<SIGNAL_BUTTON); // 신호 변경 LED 설정
  ca:	d1 98       	cbi	0x1a, 1	; 26
  cc:	08 95       	ret

000000ce <GetButtonState>:
	return GetButtonState(SIGNAL_BUTTON, &prevSignalButtonState); // prevSignalButtonState 를 GetButtonState로 보냄
}


uint8_t GetButtonState(uint8_t button, uint8_t *prevButtonState) // 범용버튼 번호, 범용버튼 상태 
{
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	eb 01       	movw	r28, r22
	uint8_t curButtonState = 1; // 현재 버튼 상태 = 1
	static uint32_t prevTime=0;  // 이전 시간 = 0 (처음만)
	uint32_t curTime; // 현재시간
	
	curButtonState = (BUTTON_PIN & (1<<button)) >> button; // 버튼이 입력을 받는다 
  de:	49 b3       	in	r20, 0x19	; 25
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <GetButtonState+0x1e>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GetButtonState+0x1a>
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	24 23       	and	r18, r20
  f4:	35 23       	and	r19, r21
  f6:	a9 01       	movw	r20, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <GetButtonState+0x30>
  fa:	55 95       	asr	r21
  fc:	47 95       	ror	r20
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <GetButtonState+0x2c>
	if ( (curButtonState == 0) && (*prevButtonState == 1) ) // 버튼이 눌렸을때
 102:	41 11       	cpse	r20, r1
 104:	0f c0       	rjmp	.+30     	; 0x124 <GetButtonState+0x56>
 106:	88 81       	ld	r24, Y
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	41 f5       	brne	.+80     	; 0x15c <GetButtonState+0x8e>
	{
		*prevButtonState = curButtonState; 
 10c:	18 82       	st	Y, r1
		prevTime = GetMillis();// millisCount;
 10e:	e7 d0       	rcall	.+462    	; 0x2de <GetMillis>
 110:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
 114:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
 118:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
 11c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x3>
		return 0;
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	21 c0       	rjmp	.+66     	; 0x166 <GetButtonState+0x98>
	}
	else if ( (curButtonState == 1) && (*prevButtonState == 0) ) // 버튼을 때고있을때
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	e1 f4       	brne	.+56     	; 0x160 <GetButtonState+0x92>
 128:	18 81       	ld	r17, Y
 12a:	11 11       	cpse	r17, r1
	{
		curTime = GetMillis();// millisCount; 
 12c:	1b c0       	rjmp	.+54     	; 0x164 <GetButtonState+0x96>
 12e:	d7 d0       	rcall	.+430    	; 0x2de <GetMillis>
		if (curTime - prevTime > DEBOUNCE) // 20ms가 경과하면
 130:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <__data_end>
 134:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <__data_end+0x1>
 138:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <__data_end+0x2>
 13c:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <__data_end+0x3>
 140:	dc 01       	movw	r26, r24
 142:	cb 01       	movw	r24, r22
 144:	8c 19       	sub	r24, r12
 146:	9d 09       	sbc	r25, r13
 148:	ae 09       	sbc	r26, r14
 14a:	bf 09       	sbc	r27, r15
 14c:	45 97       	sbiw	r24, 0x15	; 21
 14e:	a1 05       	cpc	r26, r1
 150:	b1 05       	cpc	r27, r1
 152:	48 f0       	brcs	.+18     	; 0x166 <GetButtonState+0x98>
		{
			*prevButtonState = curButtonState; 
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	88 83       	st	Y, r24
			return 1; // 버튼이 떨어질때 동작
 158:	11 e0       	ldi	r17, 0x01	; 1
 15a:	05 c0       	rjmp	.+10     	; 0x166 <GetButtonState+0x98>
		}
		return 0;
	}
	
	return 0;
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	03 c0       	rjmp	.+6      	; 0x166 <GetButtonState+0x98>
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	01 c0       	rjmp	.+2      	; 0x166 <GetButtonState+0x98>
 164:	10 e0       	ldi	r17, 0x00	; 0
}
 166:	81 2f       	mov	r24, r17
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	08 95       	ret

00000178 <GetTrafficModeButtonState>:

uint8_t GetTrafficModeButtonState()
{
	static uint8_t prevModeButtonState = 1; // 모드버튼의 기본상태 1
	
	return GetButtonState(MODE_BUTTON, &prevModeButtonState); // 원래 메모리 값을 기억해서 변경하기 위해서 포인터로 버튼 상태를 포인터로 지정
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	71 e0       	ldi	r23, 0x01	; 1
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	a7 cf       	rjmp	.-178    	; 0xce <GetButtonState>
}
 180:	08 95       	ret

00000182 <GetTrafficSignalButtonState>:

uint8_t GetTrafficSignalButtonState() // 신호 변경 버튼 상태
{
	static uint8_t prevSignalButtonState = 1; // 신호 변경 버튼 기본 상태
	
	return GetButtonState(SIGNAL_BUTTON, &prevSignalButtonState); // prevSignalButtonState 를 GetButtonState로 보냄
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	a2 cf       	rjmp	.-188    	; 0xce <GetButtonState>
}
 18a:	08 95       	ret

0000018c <LEDInit>:
 18c:	84 b3       	in	r24, 0x14	; 20
 18e:	8f 63       	ori	r24, 0x3F	; 63
 190:	84 bb       	out	0x14, r24	; 20
 192:	81 b3       	in	r24, 0x11	; 17
 194:	83 60       	ori	r24, 0x03	; 3
 196:	81 bb       	out	0x11, r24	; 17
 198:	08 95       	ret

0000019a <SetTrafficLED>:
 19a:	95 b3       	in	r25, 0x15	; 21
 19c:	90 7c       	andi	r25, 0xC0	; 192
 19e:	95 bb       	out	0x15, r25	; 21
 1a0:	95 b3       	in	r25, 0x15	; 21
 1a2:	89 2b       	or	r24, r25
 1a4:	85 bb       	out	0x15, r24	; 21
 1a6:	08 95       	ret

000001a8 <SetAutoModeLED>:
 1a8:	91 98       	cbi	0x12, 1	; 18
 1aa:	90 9a       	sbi	0x12, 0	; 18
 1ac:	08 95       	ret

000001ae <SetManualModeLED>:
 1ae:	91 9a       	sbi	0x12, 1	; 18
 1b0:	90 98       	cbi	0x12, 0	; 18
 1b2:	08 95       	ret

000001b4 <main>:

#include "main.h"

int main(void)
{
	ButtonInit();  // 버튼 입력 설정
 1b4:	89 df       	rcall	.-238    	; 0xc8 <ButtonInit>
	LEDInit(); // LED 출력 설정 
 1b6:	ea df       	rcall	.-44     	; 0x18c <LEDInit>
	
	SetTrafficState(VRHG); //  신호를 VRGH로 설정
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	25 d0       	rcall	.+74     	; 0x206 <SetTrafficState>
	SetTrafficMode(TRAFFIC_AUTO); // 기본 모드 자동 
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	26 d0       	rcall	.+76     	; 0x20c <SetTrafficMode>
	
	while (1)
	{
		if ( GetTrafficModeButtonState() )  // 모드 변경 버튼 입력
 1c0:	db df       	rcall	.-74     	; 0x178 <GetTrafficModeButtonState>
 1c2:	88 23       	and	r24, r24
 1c4:	41 f0       	breq	.+16     	; 0x1d6 <main+0x22>
		{
			if (GetTrafficMode() == TRAFFIC_AUTO) // 신호 모드가 자동이면 
 1c6:	25 d0       	rcall	.+74     	; 0x212 <GetTrafficMode>
 1c8:	81 11       	cpse	r24, r1
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <main+0x1e>
			{
				SetTrafficMode(TRAFFIC_MANUAL); // 신호 모드를 수동으로 바꿈
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	1e d0       	rcall	.+60     	; 0x20c <SetTrafficMode>
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <main+0x22>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
			}
			else
			{
				SetTrafficMode(TRAFFIC_AUTO); // 아니라면 신호 모드 자동으로 바꿈
 1d4:	1b d0       	rcall	.+54     	; 0x20c <SetTrafficMode>
 1d6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <eTrafficMode>
			}
		}
		
		switch(eTrafficMode) 
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <main+0x30>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	31 f0       	breq	.+12     	; 0x1ee <main+0x3a>
 1e2:	09 c0       	rjmp	.+18     	; 0x1f6 <main+0x42>
		{
			case TRAFFIC_AUTO: // 자동 모드
				AutoTraffic(&eTrafficState); // 자동 신호, 신호등 동작 상태를 그대로 전환하기 위해서 포인터로 지정
 1e4:	80 e1       	ldi	r24, 0x10	; 16
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	17 d0       	rcall	.+46     	; 0x218 <AutoTraffic>
				SetAutoModeLED(); // 자동 상태 LED 점등
 1ea:	de df       	rcall	.-68     	; 0x1a8 <SetAutoModeLED>
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <main+0x42>
				break;
 1ee:	80 e1       	ldi	r24, 0x10	; 16
			
			case TRAFFIC_MANUAL: //수동모드 
				ManualTraffic(&eTrafficState); // 수동신호
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	4e d0       	rcall	.+156    	; 0x290 <ManualTraffic>
 1f4:	dc df       	rcall	.-72     	; 0x1ae <SetManualModeLED>
				SetManualModeLED(); // 수동 상태 LED 점등
 1f6:	8f e9       	ldi	r24, 0x9F	; 159
 1f8:	9f e0       	ldi	r25, 0x0F	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x46>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x4c>
 200:	00 00       	nop
 202:	76 d0       	rcall	.+236    	; 0x2f0 <IncMillis>
 204:	dd cf       	rjmp	.-70     	; 0x1c0 <main+0xc>

00000206 <SetTrafficState>:
				break;
		}
		
		_delay_ms(1);
		IncMillis();
 206:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <eTrafficState>
	}
 20a:	08 95       	ret

0000020c <SetTrafficMode>:
}

uint8_t GetTrafficState() // 신호 단계 받는 함수
{
	return eTrafficState; // 단계 출력
}
 20c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <eTrafficMode>
 210:	08 95       	ret

00000212 <GetTrafficMode>:

uint8_t GetTrafficMode() // 모드 상태 받는 함수 
{
	return eTrafficMode;
}
 212:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <eTrafficMode>
 216:	08 95       	ret

00000218 <AutoTraffic>:


void AutoTraffic(uint8_t *eTrafficState) // 자동 상태 동작 
{
	switch(*eTrafficState) // 신호 단계를 받아서 작동 
 218:	fc 01       	movw	r30, r24
 21a:	80 81       	ld	r24, Z
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	99 f0       	breq	.+38     	; 0x246 <AutoTraffic+0x2e>
 220:	28 f0       	brcs	.+10     	; 0x22c <AutoTraffic+0x14>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	e9 f0       	breq	.+58     	; 0x260 <AutoTraffic+0x48>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	41 f1       	breq	.+80     	; 0x27a <AutoTraffic+0x62>
 22a:	08 95       	ret
	{
		case VRHG: 
			SetTrafficLED((1<<V_RED) | (1<<H_GREEN)); // 세로 빨간불, 가로 초록불 점등
 22c:	81 e2       	ldi	r24, 0x21	; 33
 22e:	b5 df       	rcall	.-150    	; 0x19a <SetTrafficLED>
			if (Delay(5000)) //5초동안 유지
 230:	68 e8       	ldi	r22, 0x88	; 136
 232:	73 e1       	ldi	r23, 0x13	; 19
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	6f d0       	rcall	.+222    	; 0x318 <Delay>
 23a:	88 23       	and	r24, r24
 23c:	41 f1       	breq	.+80     	; 0x28e <AutoTraffic+0x76>
 


void SetTrafficState(uint8_t trafficState) // 신호 단계 설정
{
	eTrafficState = trafficState; //신호 단계 설정
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <eTrafficState>
				SetTrafficState(VRHY); // 다음 단게로 변경
			}
			break;
		
		case VRHY:
			SetTrafficLED((1<<V_RED) | (1<<H_YELLOW)); // 세로 빨간불, 가로 노란불 점등
 244:	08 95       	ret
 246:	81 e1       	ldi	r24, 0x11	; 17
 248:	a8 df       	rcall	.-176    	; 0x19a <SetTrafficLED>
			if (Delay(2000)) // 2초동안 유지
 24a:	60 ed       	ldi	r22, 0xD0	; 208
 24c:	77 e0       	ldi	r23, 0x07	; 7
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	62 d0       	rcall	.+196    	; 0x318 <Delay>
 254:	88 23       	and	r24, r24
 256:	d9 f0       	breq	.+54     	; 0x28e <AutoTraffic+0x76>
 


void SetTrafficState(uint8_t trafficState) // 신호 단계 설정
{
	eTrafficState = trafficState; //신호 단계 설정
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <eTrafficState>
				SetTrafficState(VGHR); // 다음 단계로 변경
			}
			break;
		
		case VGHR:
			SetTrafficLED((1<<V_GREEN) | (1<<H_RED)); // 세로 초록불, 가로 빨간불 점등
 25e:	08 95       	ret
 260:	8c e0       	ldi	r24, 0x0C	; 12
			if (Delay(5000)) // 5초동안 유지
 262:	9b df       	rcall	.-202    	; 0x19a <SetTrafficLED>
 264:	68 e8       	ldi	r22, 0x88	; 136
 266:	73 e1       	ldi	r23, 0x13	; 19
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	55 d0       	rcall	.+170    	; 0x318 <Delay>
 26e:	88 23       	and	r24, r24
 


void SetTrafficState(uint8_t trafficState) // 신호 단계 설정
{
	eTrafficState = trafficState; //신호 단계 설정
 270:	71 f0       	breq	.+28     	; 0x28e <AutoTraffic+0x76>
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <eTrafficState>
				SetTrafficState(VYHR); // 다음 단계로 변경
			}
			break;
		
		case VYHR:
			SetTrafficLED((1<<V_YELLOW) | (1<<H_RED)); //세로 노란불, 가로 빨간불 점등
 278:	08 95       	ret
 27a:	8a e0       	ldi	r24, 0x0A	; 10
			if (Delay(2000)) // 2초동안 유지
 27c:	8e df       	rcall	.-228    	; 0x19a <SetTrafficLED>
 27e:	60 ed       	ldi	r22, 0xD0	; 208
 280:	77 e0       	ldi	r23, 0x07	; 7
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	48 d0       	rcall	.+144    	; 0x318 <Delay>
 288:	81 11       	cpse	r24, r1
 


void SetTrafficState(uint8_t trafficState) // 신호 단계 설정
{
	eTrafficState = trafficState; //신호 단계 설정
 28a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <eTrafficState>
 28e:	08 95       	ret

00000290 <ManualTraffic>:
			break;
	}
}

void ManualTraffic(uint8_t *eTrafficState) // 수동 상태 동작
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
	if ( GetTrafficSignalButtonState() ) // 신호 단계 변경 버튼 입력
 296:	75 df       	rcall	.-278    	; 0x182 <GetTrafficSignalButtonState>
 298:	88 23       	and	r24, r24
 29a:	51 f0       	breq	.+20     	; 0x2b0 <ManualTraffic+0x20>
	{
		uint8_t traffic = GetTrafficState() + 1; // 다음 단계로 변경
 29c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <eTrafficState>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
		
		if (traffic == 4) // 단계가 4단계까지 도달하면
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	19 f4       	brne	.+6      	; 0x2ac <ManualTraffic+0x1c>
 


void SetTrafficState(uint8_t trafficState) // 신호 단계 설정
{
	eTrafficState = trafficState; //신호 단계 설정
 2a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <eTrafficState>
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <ManualTraffic+0x20>
 2ac:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <eTrafficState>
		{
			SetTrafficState(traffic); // 아니라면 다음단계로 진행
		}
	}
	
	switch(*eTrafficState) // 신호 단계를 받아서 동작
 2b0:	88 81       	ld	r24, Y
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	49 f0       	breq	.+18     	; 0x2c8 <ManualTraffic+0x38>
 2b6:	28 f0       	brcs	.+10     	; 0x2c2 <ManualTraffic+0x32>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	49 f0       	breq	.+18     	; 0x2ce <ManualTraffic+0x3e>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	51 f0       	breq	.+20     	; 0x2d4 <ManualTraffic+0x44>
 2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <ManualTraffic+0x48>
	{
		case VRHG:
			SetTrafficLED((1<<V_RED) | (1<<H_GREEN)); // 세로 빨간불, 가로 초록불 점등
 2c2:	81 e2       	ldi	r24, 0x21	; 33
 2c4:	6a df       	rcall	.-300    	; 0x19a <SetTrafficLED>
			break;
		
		case VRHY:
			SetTrafficLED((1<<V_RED) | (1<<H_YELLOW)); // 세로 빨간불, 가로 노란불 점등
 2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <ManualTraffic+0x48>
 2c8:	81 e1       	ldi	r24, 0x11	; 17
			break;
 2ca:	67 df       	rcall	.-306    	; 0x19a <SetTrafficLED>
		
		case VGHR:
			SetTrafficLED((1<<V_GREEN) | (1<<H_RED)); // 세로 초록불, 가로 빨간불 점등
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <ManualTraffic+0x48>
 2ce:	8c e0       	ldi	r24, 0x0C	; 12
			break;
 2d0:	64 df       	rcall	.-312    	; 0x19a <SetTrafficLED>
		
		case VYHR:
			SetTrafficLED((1<<V_YELLOW) | (1<<H_RED)); // 세로 노란불, 가로 빨간불 점등
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <ManualTraffic+0x48>
 2d4:	8a e0       	ldi	r24, 0x0A	; 10
 2d6:	61 df       	rcall	.-318    	; 0x19a <SetTrafficLED>
			break;
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <GetMillis>:

static uint32_t millisCount=0; 

uint32_t GetMillis() 
{
	return millisCount;  // milliscount로 반환
 2de:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <millisCount>
 2e2:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <millisCount+0x1>
 2e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <millisCount+0x2>
 2ea:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <millisCount+0x3>
}
 2ee:	08 95       	ret

000002f0 <IncMillis>:

void IncMillis() 
{
	millisCount++; // milliscount 추가 (1ms)
 2f0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <millisCount>
 2f4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <millisCount+0x1>
 2f8:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <millisCount+0x2>
 2fc:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <millisCount+0x3>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	a1 1d       	adc	r26, r1
 304:	b1 1d       	adc	r27, r1
 306:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <millisCount>
 30a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <millisCount+0x1>
 30e:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <millisCount+0x2>
 312:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <millisCount+0x3>
 316:	08 95       	ret

00000318 <Delay>:
}

uint8_t Delay(uint32_t timeDelay) // Delay 부여
{
 318:	8f 92       	push	r8
 31a:	9f 92       	push	r9
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17

static uint32_t millisCount=0; 

uint32_t GetMillis() 
{
	return millisCount;  // milliscount로 반환
 32c:	c0 90 0b 01 	lds	r12, 0x010B	; 0x80010b <millisCount>
 330:	d0 90 0c 01 	lds	r13, 0x010C	; 0x80010c <millisCount+0x1>
 334:	e0 90 0d 01 	lds	r14, 0x010D	; 0x80010d <millisCount+0x2>
 338:	f0 90 0e 01 	lds	r15, 0x010E	; 0x80010e <millisCount+0x3>
	static uint32_t prevTime = 0; // 이전 시간 설정
	uint32_t curTime = 0; //현재 시간 설정
	
	curTime = GetMillis(); //현재 시간 == millcount
	
	if (delayStartFlag == 0)  // delay 시작지점
 33c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <delayStartFlag.1740>
 340:	21 11       	cpse	r18, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <Delay+0x44>
	{
		delayStartFlag = 1;  
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <delayStartFlag.1740>
		prevTime = curTime; // 현재 시간 = 이전시간 ==> 시간 초기화 
 34a:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <prevTime.1741>
 34e:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <prevTime.1741+0x1>
 352:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <prevTime.1741+0x2>
 356:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <prevTime.1741+0x3>
 35a:	18 c0       	rjmp	.+48     	; 0x38c <Delay+0x74>
	}
	else if (curTime - prevTime > timeDelay) // curtime - prevtime 이 설정한 시간이 되면
 35c:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <prevTime.1741>
 360:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <prevTime.1741+0x1>
 364:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <prevTime.1741+0x2>
 368:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <prevTime.1741+0x3>
 36c:	46 01       	movw	r8, r12
 36e:	57 01       	movw	r10, r14
 370:	80 1a       	sub	r8, r16
 372:	91 0a       	sbc	r9, r17
 374:	a2 0a       	sbc	r10, r18
 376:	b3 0a       	sbc	r11, r19
 378:	68 15       	cp	r22, r8
 37a:	79 05       	cpc	r23, r9
 37c:	8a 05       	cpc	r24, r10
 37e:	9b 05       	cpc	r25, r11
 380:	20 f4       	brcc	.+8      	; 0x38a <Delay+0x72>
	{
		delayStartFlag = 0; //  
 382:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <delayStartFlag.1740>
		return 1; // 출력
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	01 c0       	rjmp	.+2      	; 0x38c <Delay+0x74>
		
	}
	return 0;
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	82 2f       	mov	r24, r18
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	bf 90       	pop	r11
 39c:	af 90       	pop	r10
 39e:	9f 90       	pop	r9
 3a0:	8f 90       	pop	r8
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
